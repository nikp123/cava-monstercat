## Configuration file for CAVA. Default values are commented out. Use either ';' or '#' for commenting.


[general]

# Smoothing mode. Can be 'normal', 'scientific' or 'waves'. DEPRECATED as of 0.6.0
; mode = normal
 
# Accepts only non-negative values.
; framerate = 60

# 'autosens' will attempt to decrease sensitivity if the bars peak. 1 = on, 0 = off
# new as of 0.6.0 autosens of low values (dynamic range)
# 'overshoot' allows bars to overshoot (in % of terminal height) without initiating autosens. DEPRECATED as of 0.6.0
autosens = 0
overshoot = 0

# Manual sensitivity in %. Autosens must be turned off for this to take effect.
# 200 means double height. Accepts only non-negative values.
sensitivity = 30

# The number of bars (0-200). 0 sets it to auto (fill up console).
# Bars' width and space between bars in number of characters.
# These options DO NOT apply if you're using 'sdl' or 'x' modes.
bars = 63
; bar_width = 2
; bar_spacing = 1

# Lower and higher cutoff frequencies for lowest and highest bars
# the bandwidth of the visualizer.
# Note: there is a minimum total bandwidth of 43Mhz x number of bars.
# Cava will automatically increase the higher cutoff if a too low band is specified.
; lower_cutoff_freq = 50
; higher_cutoff_freq = 10000



[window]

# Bars' width and space between bars in pixels.
# Doesn't apply to terminal or serial modes.
bar_width = 13
bar_spacing = 5

# Window width and height
width = 1180
height = 300

# Fullscreen toggle (1 = on, 0 = off)
; fullscreen = 0

# Enables or disables window borders (1 = on, 0 = off)
border = 0

# Window transparency toggle (works under X ONLY) (same applies)
transparency = 1

# Keeps the window under any other (works under X ONLY) (again, same applies)
keep_below = 1

# Set window properties like WM_CLASS.
set_win_props = 1

# This allows for the window to be positioned a bit easier
# by putting the window to the part of the screen, which are:
# top_left, top, top_right, left, center, right, bottom_left,
# bottom, bottom_right and none if you don't want automatic positioning
alignment = 'center'

# Additionally we can move the window from the already set
# part of the screen (units are in pixels)
x_padding = 0
y_padding = -143

# On Xlib or win32 you can enable opengl to take advantage of your graphics card for drawing.
# NOTE: On win32 it's MUST BE ON.
opengl = 1


[input]

# Audio capturing method. Possible methods are: 'pulse', 'alsa' or 'fifo'.
# Defaults to 'pulse', 'alsa' or 'fifo', in that order, dependent on what support cava was built with.
#
# All input methods uses the same config variable 'source'
# to define where it should get the audio.
#
# For pulseaudio 'source' will be the source. Default: 'auto', which uses the monitor source of the default sink
# (all pulseaudio sinks(outputs) have 'monitor' sources(inputs) associated with them).
# 
# For alsa 'source' will be the capture device.
# For fifo 'source' will be the path to fifo-file.
; method = pulse
; source = auto

; method = alsa
; source = hw:Loopback,1

; method = fifo
; source = /tmp/mpd.fifo

; method = portaudio
; source = default

[output]

# Ouput method. Can be 'ncurses', 'noncurses', 'raw', 'sdl' or 'x'. 
# 'noncurses' is for systems that does not suport ncurses.
# 'raw' is a 16 bit data stream of the bar heights that can be used to send to other applications.
# 'raw' defaults to 200 bars, which can be adjusted in the 'bars' option above.
# 'sdl' is for a graphical window using OpenGL
# 'x' is for a graphical window using XRender (usually faster, unsupported in wayland however)
# 'win' is a win32 graphical window (which embedded into the NT kernel)
method = x

# Visual channels. Can be 'stereo' or 'mono'.
# 'stereo' mirrors both channels with low frequencies in center.
# 'mono' averages both channels and outputs left to right lowest to highest frequencies.
channels = mono

# Raw output target. A fifo will be created if target does not exist.
; raw_target = /dev/stdout

# Raw data format. Can be 'binary' or 'ascii'.
; data_format = binary

# Binary bit format, can be '8bit' (0-255) or '16bit' (0-65530).
; bit_format = 16bit

# Ascii max value. In 'ascii' mode range will run from 0 to value specified here
; ascii_max_range = 1000

# Ascii delimiters. In ascii format each bar and frame is separated by a delimiters.
# Use decimal value in ascii table (i.e. 59 = ';' and 10 = '\n' (line feed)).
; bar_delimiter = 59
; frame_delimiter = 10



[color]

# Colors can be one of seven predefined: black, blue, cyan, green, magenta, red, white, yellow.
# Or defined by hex code '#xxxxxx' (hex code must be within ''). User defined colors requires a
# terminal that can change color definitions such as Gnome-terminal or rxvt.
# Or in case you're running in 'x' you could use the default option
; background = black
; foreground = "#dd7000"	# House 
; foreground = "#8D04E1"	# Dubstep
; foreground = "#e5d900"	# Electro
; foreground = "#c2c1c2"	# Misc
; foreground = "#0db057"	# Hardcore
; foreground = "#e80000"	# Drum & Bass
; foreground = "#000000"	# Everything Black xD
 foreground = "#ffffff"	# New layout


# This adjusts the opacity of the bars (must have transparency on in order to work)
# The option is quite buggy in most cases, so it may or may not work.
; foreground_opacity = 1.0

# Gradient mode, only hex defined colors are supported, background must also be defined in hex
# or remain commented out. 1 = on, 0 = off. Warning: for certain terminal emulators cava will
# not able to restore color definitions on exit, simply restart your terminal to restore colors.
# On X mode, you must either have transparency or OpenGL enabled for this to work.
; gradient = 0
; gradient_color_1 = '#0099ff'
; gradient_color_2 = '#ff3399'



[smoothing]

# Percentage value for integral smoothing. Takes values from 0 - 100.
# Higher values means smoother, but less precise. 0 to disable.
integral = 75

# Disables or enables the so-called "Monstercat smoothing" with or without "waves". Set to 0 to disable. 
monstercat = 0.88
waves = 0.7

# Set gravity percentage for "drop off". Higher values means bars will drop faster.
# Accepts only non-negative values. 50 means half gravity, 200 means double. Set to 0 to disable "drop off".
gravity = 1000


# In bar height, bars that would have been lower that this will not be drawn.
; ignore = 0

# This option emulates a logarithmic fourier transform, because FFTW3 doesn't have it by default.
# It is quite inaccurate, but to properly use it you can apply basic math
# the value of fake log is as follows middle_position = bars/(fake_log+1.0)
fake_log = 4.5


[shadow]
# Fake shadow effect (works under Xlib and win32)
# Warning shadows may not be larger than bars spacing, or it will cause issues.
size = 4
# Valid shadow format is #aarrggbb
color = "#cc000000"


[eq]

# This one is tricky. You can have as much keys as you want.
# Remember to uncomment more then one key! More keys = more precision.
# Look at readme.md on github for further explanations and examples.
1 = 9.0
2 = 3.5
3 = 1.8
4 = 3.0
5 = 3.0
6 = 1.0
7 = 0.1
